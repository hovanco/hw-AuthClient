{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { getToken, getTokenLocal, removeToken } from '../api/token';\nimport { STORE_URL } from '../configs/vars';\nimport { checkNoStore } from '../features/auth/utils';\nimport { useSearchState } from './use-search-state';\n\nconst redirectAppPage = async (token, searchState) => {\n  const isNoStore = await checkNoStore(token);\n  let params = {\n    token: JSON.stringify(token),\n    remember: true,\n    location: isNoStore ? '/' : searchState.location,\n    isHasStore: !isNoStore\n  };\n\n  if (searchState.saleChannel) {\n    params = { ...params,\n      saleChannel: searchState.saleChannel\n    };\n  }\n\n  const search = queryString.stringify(params);\n\n  if (isNoStore) {\n    window.location.href = `${STORE_URL}save-token?${search}`;\n  } else {\n    window.location.href = `${searchState.url}?${search}`;\n  }\n};\n\nconst useProgress = () => {\n  _s();\n\n  const history = useHistory();\n  const [loading, setLoading] = useState(true);\n  const searchState = useSearchState();\n  const {\n    pathname\n  } = history.location;\n\n  const getUrl = () => {\n    if (pathname === '/sign-up') {\n      removeToken();\n      return '/sign-up';\n    }\n\n    return '/404';\n  };\n\n  useEffect(() => {\n    if (pathname === '/reset-password') {\n      setLoading(false);\n      return;\n    }\n\n    if (!searchState.url || !searchState.location) {\n      history.push(getUrl());\n      setLoading(false);\n      return;\n    }\n\n    if (searchState.isLogout === 'true') {\n      removeToken();\n\n      if (searchState.guest === 'true') {\n        const search = queryString.stringify({\n          location: searchState.location,\n          guest: true\n        });\n        window.location.href = `${searchState.url}?${search}`;\n      }\n\n      setLoading(false);\n      return;\n    }\n\n    const accessToken = getToken('accessToken');\n\n    if (!accessToken) {\n      setLoading(false);\n      return;\n    }\n\n    setLoading(false);\n    const token = getTokenLocal();\n\n    if (token) {\n      redirectAppPage(token, searchState);\n    }\n  }, []);\n  return loading;\n};\n\n_s(useProgress, \"OlEByThPgsdbqxIVdwrLfM3Saeo=\", false, function () {\n  return [useHistory, useSearchState];\n});\n\nexport { useProgress, redirectAppPage };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AuthClient/src/hooks/use-progress.ts"],"names":["queryString","useEffect","useState","useHistory","getToken","getTokenLocal","removeToken","STORE_URL","checkNoStore","useSearchState","redirectAppPage","token","searchState","isNoStore","params","JSON","stringify","remember","location","isHasStore","saleChannel","search","window","href","url","useProgress","history","loading","setLoading","pathname","getUrl","push","isLogout","guest","accessToken"],"mappings":"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","sourcesContent":["import * as queryString from 'query-string';\nimport {useEffect, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {getToken, getTokenLocal, IToken, removeToken} from '../api/token';\nimport {STORE_URL} from '../configs/vars';\nimport {checkNoStore} from '../features/auth/utils';\nimport {ISearchState, useSearchState} from './use-search-state';\n\nconst redirectAppPage = async (token: IToken, searchState: ISearchState) => {\n    const isNoStore = await checkNoStore(token);\n\n    let params: any = {\n        token: JSON.stringify(token),\n        remember: true,\n        location: isNoStore ? '/' : searchState.location,\n        isHasStore: !isNoStore,\n    };\n\n    if (searchState.saleChannel) {\n        params = {\n            ...params,\n            saleChannel: searchState.saleChannel,\n        };\n    }\n\n    const search = queryString.stringify(params);\n\n    if (isNoStore) {\n        window.location.href = `${STORE_URL}save-token?${search}`;\n    } else {\n        window.location.href = `${searchState.url}?${search}`;\n    }\n};\n\nconst useProgress = () => {\n    const history = useHistory();\n    const [loading, setLoading] = useState<boolean>(true);\n    const searchState = useSearchState();\n    const {pathname} = history.location;\n\n    const getUrl = (): string => {\n        if (pathname === '/sign-up') {\n            removeToken();\n            return '/sign-up';\n        }\n        return '/404';\n    };\n\n    useEffect(() => {\n        if (pathname === '/reset-password') {\n            setLoading(false);\n            return;\n        }\n\n        if (!searchState.url || !searchState.location) {\n            history.push(getUrl());\n            setLoading(false);\n            return;\n        }\n\n        if (searchState.isLogout === 'true') {\n            removeToken();\n            if (searchState.guest === 'true') {\n                const search = queryString.stringify({\n                    location: searchState.location,\n                    guest: true,\n                });\n                window.location.href = `${searchState.url}?${search}`;\n            }\n            setLoading(false);\n            return;\n        }\n\n        const accessToken = getToken('accessToken');\n        if (!accessToken) {\n            setLoading(false);\n            return;\n        }\n\n        setLoading(false);\n\n        const token = getTokenLocal();\n        if (token) {\n            redirectAppPage(token, searchState);\n        }\n    }, []);\n\n    return loading;\n};\n\nexport {useProgress, redirectAppPage};\n"]},"metadata":{},"sourceType":"module"}