{"ast":null,"code":"import { axiosClient } from './axiosClient';\n\nasync function getUser() {\n  const url = '/authentication/v1/users/info';\n  const response = await axiosClient({\n    url,\n    method: 'GET'\n  });\n  return response;\n}\n\nasync function loginWithEmail(data, service) {\n  const url = service ? `/authentication/v1/signin/${service}` : '/authentication/v1/signin';\n  const response = await axiosClient({\n    method: 'POST',\n    url,\n    data\n  });\n  return response;\n}\n\nasync function forgotPassword(data) {\n  const url = '/authentication/v1/forgot-password';\n  const response = await axiosClient({\n    method: 'POST',\n    url,\n    data\n  });\n  return response;\n}\n\nasync function resetPassword(data) {\n  const url = '/authentication/v1/reset-password';\n  const response = await axiosClient({\n    method: 'POST',\n    url,\n    data\n  });\n  return response;\n}\n\nasync function signupWithEmail(data) {\n  const response = await axiosClient({\n    method: 'POST',\n    url: '/authentication/v1/signup',\n    data\n  });\n  return response.data;\n}\n\nasync function loginActionWithService(data, service) {\n  const response = await loginWithEmail(data, service);\n  return response;\n}\n\nasync function refreshAccessToken(refreshToken) {\n  const response = await axiosClient({\n    method: 'POST',\n    url: 'authentication/v1/auth/refresh-token',\n    data: {\n      refreshToken\n    }\n  });\n  return response;\n}\n\nasync function existingRefreshToken(refreshToken) {\n  const response = await axiosClient({\n    method: 'POST',\n    url: '/authentication/v1/auth/existing-refresh-token',\n    data: {\n      refreshToken\n    }\n  });\n  return response;\n}\n\nasync function logout(refreshToken) {\n  const response = await axiosClient({\n    method: 'POST',\n    url: '/authentication/v1/auth/logout',\n    data: {\n      refreshToken\n    }\n  });\n  return response.data;\n}\n\nexport { getUser, loginWithEmail, signupWithEmail, loginActionWithService, forgotPassword, resetPassword, refreshAccessToken, existingRefreshToken, logout };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AuthClient/src/api/auth.ts"],"names":["axiosClient","getUser","url","response","method","loginWithEmail","data","service","forgotPassword","resetPassword","signupWithEmail","loginActionWithService","refreshAccessToken","refreshToken","existingRefreshToken","logout"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,eAA1B;;AAYA,eAAeC,OAAf,GAAuC;AACnC,QAAMC,GAAG,GAAG,+BAAZ;AAEA,QAAMC,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BE,IAAAA,GAD+B;AAE/BE,IAAAA,MAAM,EAAE;AAFuB,GAAD,CAAlC;AAKA,SAAOD,QAAP;AACH;;AAED,eAAeE,cAAf,CACIC,IADJ,EAEIC,OAFJ,EAGgB;AACZ,QAAML,GAAG,GAAGK,OAAO,GACZ,6BAA4BA,OAAQ,EADxB,GAEb,2BAFN;AAGA,QAAMJ,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAF+B;AAG/BI,IAAAA;AAH+B,GAAD,CAAlC;AAMA,SAAOH,QAAP;AACH;;AAED,eAAeK,cAAf,CAA8BF,IAA9B,EAAgE;AAC5D,QAAMJ,GAAG,GAAG,oCAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAF+B;AAG/BI,IAAAA;AAH+B,GAAD,CAAlC;AAMA,SAAOH,QAAP;AACH;;AAED,eAAeM,aAAf,CAA6BH,IAA7B,EAAiE;AAC7D,QAAMJ,GAAG,GAAG,mCAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAF+B;AAG/BI,IAAAA;AAH+B,GAAD,CAAlC;AAMA,SAAOH,QAAP;AACH;;AAED,eAAeO,eAAf,CAA+BJ,IAA/B,EAAkE;AAC9D,QAAMH,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAAG,EAAE,2BAF0B;AAG/BI,IAAAA;AAH+B,GAAD,CAAlC;AAMA,SAAOH,QAAQ,CAACG,IAAhB;AACH;;AAED,eAAeK,sBAAf,CACIL,IADJ,EAEIC,OAFJ,EAGgB;AACZ,QAAMJ,QAAQ,GAAG,MAAME,cAAc,CAACC,IAAD,EAAOC,OAAP,CAArC;AACA,SAAOJ,QAAP;AACH;;AAED,eAAeS,kBAAf,CAAkCC,YAAlC,EAAsE;AAClE,QAAMV,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAAG,EAAE,sCAF0B;AAG/BI,IAAAA,IAAI,EAAE;AACFO,MAAAA;AADE;AAHyB,GAAD,CAAlC;AAQA,SAAOV,QAAP;AACH;;AAED,eAAeW,oBAAf,CAAoCD,YAApC,EAAwE;AACpE,QAAMV,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAAG,EAAE,gDAF0B;AAG/BI,IAAAA,IAAI,EAAE;AACFO,MAAAA;AADE;AAHyB,GAAD,CAAlC;AAQA,SAAOV,QAAP;AACH;;AAED,eAAeY,MAAf,CAAsBF,YAAtB,EAA0D;AACtD,QAAMV,QAAQ,GAAG,MAAMH,WAAW,CAAC;AAC/BI,IAAAA,MAAM,EAAE,MADuB;AAE/BF,IAAAA,GAAG,EAAE,gCAF0B;AAG/BI,IAAAA,IAAI,EAAE;AACFO,MAAAA;AADE;AAHyB,GAAD,CAAlC;AAQA,SAAOV,QAAQ,CAACG,IAAhB;AACH;;AAED,SACIL,OADJ,EAEII,cAFJ,EAGIK,eAHJ,EAIIC,sBAJJ,EAKIH,cALJ,EAMIC,aANJ,EAOIG,kBAPJ,EAQIE,oBARJ,EASIC,MATJ","sourcesContent":["import {axiosClient} from './axiosClient';\n\ninterface FormAuthDate {\n    email?: string;\n    password?: string;\n    accessToken?: string;\n}\ninterface IResetPassword {\n    password?: string;\n    token?: string;\n}\n\nasync function getUser(): Promise<any> {\n    const url = '/authentication/v1/users/info';\n\n    const response = await axiosClient({\n        url,\n        method: 'GET',\n    });\n\n    return response;\n}\n\nasync function loginWithEmail(\n    data: FormAuthDate,\n    service?: string,\n): Promise<any> {\n    const url = service\n        ? `/authentication/v1/signin/${service}`\n        : '/authentication/v1/signin';\n    const response = await axiosClient({\n        method: 'POST',\n        url,\n        data,\n    });\n\n    return response;\n}\n\nasync function forgotPassword(data: FormAuthDate): Promise<any> {\n    const url = '/authentication/v1/forgot-password';\n    const response = await axiosClient({\n        method: 'POST',\n        url,\n        data,\n    });\n\n    return response;\n}\n\nasync function resetPassword(data: IResetPassword): Promise<any> {\n    const url = '/authentication/v1/reset-password';\n    const response = await axiosClient({\n        method: 'POST',\n        url,\n        data,\n    });\n\n    return response;\n}\n\nasync function signupWithEmail(data: FormAuthDate): Promise<void> {\n    const response = await axiosClient({\n        method: 'POST',\n        url: '/authentication/v1/signup',\n        data,\n    });\n\n    return response.data;\n}\n\nasync function loginActionWithService(\n    data: FormAuthDate,\n    service?: any,\n): Promise<any> {\n    const response = await loginWithEmail(data, service);\n    return response;\n}\n\nasync function refreshAccessToken(refreshToken: string): Promise<any> {\n    const response = await axiosClient({\n        method: 'POST',\n        url: 'authentication/v1/auth/refresh-token',\n        data: {\n            refreshToken,\n        },\n    });\n\n    return response;\n}\n\nasync function existingRefreshToken(refreshToken: string): Promise<any> {\n    const response = await axiosClient({\n        method: 'POST',\n        url: '/authentication/v1/auth/existing-refresh-token',\n        data: {\n            refreshToken,\n        },\n    });\n\n    return response\n}\n\nasync function logout(refreshToken: string): Promise<any> {\n    const response = await axiosClient({\n        method: 'POST',\n        url: '/authentication/v1/auth/logout',\n        data: {\n            refreshToken,\n        },\n    });\n\n    return response.data;\n}\n\nexport {\n    getUser,\n    loginWithEmail,\n    signupWithEmail,\n    loginActionWithService,\n    forgotPassword,\n    resetPassword,\n    refreshAccessToken,\n    existingRefreshToken,\n    logout\n};\n"]},"metadata":{},"sourceType":"module"}