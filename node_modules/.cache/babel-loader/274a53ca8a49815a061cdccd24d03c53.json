{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { logout } from '../api';\nimport { getToken, getTokenLocal, removeToken } from '../api/token';\nimport { STORE_URL } from '../constants';\nimport { checkNoStore } from '../features/auth/utils';\nimport { useSearchState } from './use-search-state';\n\nasync function redirectAppPage(token, searchState) {\n  const isNoStore = await checkNoStore(token);\n  let params = {\n    token: JSON.stringify(token),\n    remember: true,\n    location: isNoStore ? '/' : searchState.location,\n    isHasStore: !isNoStore\n  };\n\n  if (searchState.saleChannel) {\n    params = { ...params,\n      saleChannel: searchState.saleChannel\n    };\n  }\n\n  const search = queryString.stringify(params);\n\n  if (isNoStore) {\n    window.location.href = `${STORE_URL}save-token?${search}`;\n  } else {\n    window.location.href = `${searchState.url}?${search}`;\n  }\n}\n\nasync function handleLogout() {\n  try {\n    const refreshToken = getToken('refreshToken');\n\n    if (refreshToken) {\n      await logout(refreshToken);\n    }\n  } catch (error) {} finally {\n    removeToken();\n  }\n}\n\nasync function getUrl(pathname) {\n  if (pathname === '/sign-up') {\n    await handleLogout();\n    return '/sign-up';\n  }\n\n  return '/404';\n}\n\nconst useProgress = () => {\n  _s();\n\n  const history = useHistory();\n  const searchState = useSearchState();\n  const [loading, setLoading] = useState(true);\n  const {\n    pathname\n  } = history.location;\n  useEffect(() => {\n    async function handleProgress() {\n      if (pathname === '/reset-password') {\n        setLoading(false);\n        return;\n      }\n\n      if (!searchState.url || !searchState.location) {\n        const url = await getUrl(pathname);\n        history.push(url);\n        setLoading(false);\n        return;\n      }\n\n      if (searchState.isLogout === 'true') {\n        await handleLogout();\n\n        if (searchState.guest === 'true') {\n          const search = queryString.stringify({\n            location: searchState.location,\n            guest: true\n          });\n          window.location.href = `${searchState.url}?${search}`;\n        }\n\n        setLoading(false);\n        return;\n      }\n\n      const accessToken = getToken('accessToken');\n\n      if (!accessToken) {\n        setLoading(false);\n        return;\n      }\n\n      const token = getTokenLocal();\n\n      if (token) {\n        redirectAppPage(token, searchState);\n      }\n\n      setLoading(false);\n    }\n\n    handleProgress();\n  }, []);\n  return loading;\n};\n\n_s(useProgress, \"SyRavu7ObqhvpaKYZ5edtdnwxxE=\", false, function () {\n  return [useHistory, useSearchState];\n});\n\nexport { useProgress, redirectAppPage };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AuthClient/src/hooks/use-progress.ts"],"names":["queryString","useEffect","useState","useHistory","logout","getToken","getTokenLocal","removeToken","STORE_URL","checkNoStore","useSearchState","redirectAppPage","token","searchState","isNoStore","params","JSON","stringify","remember","location","isHasStore","saleChannel","search","window","href","url","handleLogout","refreshToken","error","getUrl","pathname","useProgress","history","loading","setLoading","handleProgress","push","isLogout","guest","accessToken"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,cAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAA0CC,WAA1C,QAA6D,cAA7D;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAAuBC,cAAvB,QAA6C,oBAA7C;;AAEA,eAAeC,eAAf,CAA+BC,KAA/B,EAA8CC,WAA9C,EAAyE;AACrE,QAAMC,SAAS,GAAG,MAAML,YAAY,CAACG,KAAD,CAApC;AAEA,MAAIG,MAAW,GAAG;AACdH,IAAAA,KAAK,EAAEI,IAAI,CAACC,SAAL,CAAeL,KAAf,CADO;AAEdM,IAAAA,QAAQ,EAAE,IAFI;AAGdC,IAAAA,QAAQ,EAAEL,SAAS,GAAG,GAAH,GAASD,WAAW,CAACM,QAH1B;AAIdC,IAAAA,UAAU,EAAE,CAACN;AAJC,GAAlB;;AAOA,MAAID,WAAW,CAACQ,WAAhB,EAA6B;AACzBN,IAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAELM,MAAAA,WAAW,EAAER,WAAW,CAACQ;AAFpB,KAAT;AAIH;;AAED,QAAMC,MAAM,GAAGtB,WAAW,CAACiB,SAAZ,CAAsBF,MAAtB,CAAf;;AAEA,MAAID,SAAJ,EAAe;AACXS,IAAAA,MAAM,CAACJ,QAAP,CAAgBK,IAAhB,GAAwB,GAAEhB,SAAU,cAAac,MAAO,EAAxD;AACH,GAFD,MAEO;AACHC,IAAAA,MAAM,CAACJ,QAAP,CAAgBK,IAAhB,GAAwB,GAAEX,WAAW,CAACY,GAAI,IAAGH,MAAO,EAApD;AACH;AACJ;;AAED,eAAeI,YAAf,GAA8B;AAC1B,MAAI;AACA,UAAMC,YAAY,GAAGtB,QAAQ,CAAC,cAAD,CAA7B;;AACA,QAAIsB,YAAJ,EAAkB;AACd,YAAMvB,MAAM,CAACuB,YAAD,CAAZ;AACH;AACJ,GALD,CAKE,OAAOC,KAAP,EAAc,CACf,CAND,SAMU;AACNrB,IAAAA,WAAW;AACd;AACJ;;AAED,eAAesB,MAAf,CAAsBC,QAAtB,EAAyD;AACrD,MAAIA,QAAQ,KAAK,UAAjB,EAA6B;AACzB,UAAMJ,YAAY,EAAlB;AACA,WAAO,UAAP;AACH;;AACD,SAAO,MAAP;AACH;;AAED,MAAMK,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,OAAO,GAAG7B,UAAU,EAA1B;AACA,QAAMU,WAAW,GAAGH,cAAc,EAAlC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBhC,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM;AAAE4B,IAAAA;AAAF,MAAeE,OAAO,CAACb,QAA7B;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAekC,cAAf,GAAgC;AAC5B,UAAIL,QAAQ,KAAK,iBAAjB,EAAoC;AAChCI,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAED,UAAI,CAACrB,WAAW,CAACY,GAAb,IAAoB,CAACZ,WAAW,CAACM,QAArC,EAA+C;AAC3C,cAAMM,GAAG,GAAG,MAAMI,MAAM,CAACC,QAAD,CAAxB;AAEAE,QAAAA,OAAO,CAACI,IAAR,CAAaX,GAAb;AACAS,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEA;AACH;;AAED,UAAIrB,WAAW,CAACwB,QAAZ,KAAyB,MAA7B,EAAqC;AACjC,cAAMX,YAAY,EAAlB;;AAEA,YAAIb,WAAW,CAACyB,KAAZ,KAAsB,MAA1B,EAAkC;AAC9B,gBAAMhB,MAAM,GAAGtB,WAAW,CAACiB,SAAZ,CAAsB;AACjCE,YAAAA,QAAQ,EAAEN,WAAW,CAACM,QADW;AAEjCmB,YAAAA,KAAK,EAAE;AAF0B,WAAtB,CAAf;AAKAf,UAAAA,MAAM,CAACJ,QAAP,CAAgBK,IAAhB,GAAwB,GAAEX,WAAW,CAACY,GAAI,IAAGH,MAAO,EAApD;AACH;;AAEDY,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEA;AACH;;AAED,YAAMK,WAAW,GAAGlC,QAAQ,CAAC,aAAD,CAA5B;;AAEA,UAAI,CAACkC,WAAL,EAAkB;AACdL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAGD,YAAMtB,KAAK,GAAGN,aAAa,EAA3B;;AAEA,UAAIM,KAAJ,EAAW;AACPD,QAAAA,eAAe,CAACC,KAAD,EAAQC,WAAR,CAAf;AACH;;AAEDqB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;;AAEDC,IAAAA,cAAc;AACjB,GAnDQ,EAmDN,EAnDM,CAAT;AAqDA,SAAOF,OAAP;AACH,CA5DD;;GAAMF,W;UACc5B,U,EACIO,c;;;AA4DxB,SAASqB,WAAT,EAAsBpB,eAAtB","sourcesContent":["import * as queryString from 'query-string';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { logout } from '../api';\nimport { getToken, getTokenLocal, IToken, removeToken } from '../api/token';\nimport { STORE_URL } from '../constants';\nimport { checkNoStore } from '../features/auth/utils';\nimport { ISearchState, useSearchState } from './use-search-state';\n\nasync function redirectAppPage(token: IToken, searchState: ISearchState) {\n    const isNoStore = await checkNoStore(token);\n\n    let params: any = {\n        token: JSON.stringify(token),\n        remember: true,\n        location: isNoStore ? '/' : searchState.location,\n        isHasStore: !isNoStore,\n    };\n\n    if (searchState.saleChannel) {\n        params = {\n            ...params,\n            saleChannel: searchState.saleChannel,\n        };\n    }\n\n    const search = queryString.stringify(params);\n\n    if (isNoStore) {\n        window.location.href = `${STORE_URL}save-token?${search}`;\n    } else {\n        window.location.href = `${searchState.url}?${search}`;\n    }\n}\n\nasync function handleLogout() {\n    try {\n        const refreshToken = getToken('refreshToken');\n        if (refreshToken) {\n            await logout(refreshToken);\n        }\n    } catch (error) {\n    } finally {\n        removeToken();\n    }\n}\n\nasync function getUrl(pathname: string): Promise<string> {\n    if (pathname === '/sign-up') {\n        await handleLogout();\n        return '/sign-up';\n    }\n    return '/404';\n}\n\nconst useProgress = () => {\n    const history = useHistory();\n    const searchState = useSearchState();\n    const [loading, setLoading] = useState<boolean>(true);\n    const { pathname } = history.location;\n\n    useEffect(() => {\n        async function handleProgress() {\n            if (pathname === '/reset-password') {\n                setLoading(false);\n                return;\n            }\n\n            if (!searchState.url || !searchState.location) {\n                const url = await getUrl(pathname);\n\n                history.push(url);\n                setLoading(false);\n\n                return;\n            }\n\n            if (searchState.isLogout === 'true') {\n                await handleLogout();\n\n                if (searchState.guest === 'true') {\n                    const search = queryString.stringify({\n                        location: searchState.location,\n                        guest: true,\n                    });\n\n                    window.location.href = `${searchState.url}?${search}`;\n                }\n\n                setLoading(false);\n\n                return;\n            }\n\n            const accessToken = getToken('accessToken');\n\n            if (!accessToken) {\n                setLoading(false);\n                return;\n            }\n\n\n            const token = getTokenLocal();\n\n            if (token) {\n                redirectAppPage(token, searchState);\n            }\n\n            setLoading(false);\n        }\n\n        handleProgress();\n    }, []);\n\n    return loading;\n};\n\nexport { useProgress, redirectAppPage };\n"]},"metadata":{},"sourceType":"module"}