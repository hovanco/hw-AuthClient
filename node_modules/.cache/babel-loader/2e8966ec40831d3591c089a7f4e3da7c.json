{"ast":null,"code":"var _jsxFileName = \"/Users/mac3/Desktop/workspace/AuthClient/src/routes/routes.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, lazy, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { refreshAccessToken } from '../api';\nimport { checkToken, getToken, getTokenLocal, removeToken, setToken } from '../api/token';\nimport { Loading, NotFound } from '../components';\nimport { useProgress } from '../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Auth = /*#__PURE__*/lazy(_c = () => import('../features/auth'));\n_c2 = Auth;\n\nconst AppRouter = () => {\n  _s();\n\n  const loading = useProgress();\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      component: NotFound\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppRouter, \"XVVRO1jXyYsNR2EMAmBORrbae+Q=\", false, function () {\n  return [useProgress];\n});\n\n_c3 = AppRouter;\n\nconst Routes = () => {\n  _s2();\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function loadToken() {\n      try {\n        setLoading(true);\n        const accessToken = getToken('accessToken');\n\n        if (!accessToken) {\n          removeToken();\n          setLoading(false);\n          return;\n        }\n\n        const isValidAccessToken = checkToken(accessToken);\n\n        if (!isValidAccessToken) {\n          const refreshToken = getToken('refreshToken');\n\n          if (!refreshToken) {\n            removeToken();\n            setLoading(false);\n            return;\n          }\n\n          const isValidRefreshToken = checkToken(refreshToken);\n\n          if (!isValidRefreshToken) {\n            removeToken();\n            setLoading(false);\n            return;\n          }\n\n          const responseAccessToken = await refreshAccessToken(refreshToken);\n          const token = getTokenLocal();\n          const newToken = { ...token,\n            accessToken: responseAccessToken.accessToken\n          };\n          setToken({\n            token: newToken,\n            remember: true\n          });\n          setLoading(false);\n          return;\n        }\n\n        setLoading(false);\n        return;\n      } catch (error) {} finally {\n        setLoading(false);\n      }\n    }\n\n    loadToken();\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(Loading, {\n      full: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Routes, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n\n_c4 = Routes;\nexport { Routes };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Auth$lazy\");\n$RefreshReg$(_c2, \"Auth\");\n$RefreshReg$(_c3, \"AppRouter\");\n$RefreshReg$(_c4, \"Routes\");","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AuthClient/src/routes/routes.tsx"],"names":["React","useEffect","useState","lazy","Suspense","BrowserRouter","Router","Route","Switch","refreshAccessToken","checkToken","getToken","getTokenLocal","removeToken","setToken","Loading","NotFound","useProgress","Auth","AppRouter","loading","Routes","setLoading","loadToken","accessToken","isValidAccessToken","refreshToken","isValidRefreshToken","responseAccessToken","token","newToken","remember","error"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState, lazy, Suspense} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {refreshAccessToken} from '../api';\nimport {\n    checkToken,\n    getToken,\n    getTokenLocal,\n    removeToken,\n    setToken,\n    IToken,\n} from '../api/token';\nimport {Loading, NotFound} from '../components';\nimport {useProgress} from '../hooks';\n\nconst Auth = lazy(() => import('../features/auth'));\n\ninterface Props {}\n\nconst AppRouter: FC = () => {\n    const loading = useProgress();\n\n    if (loading) {\n        return <Loading full />;\n    }\n    return (\n        <Switch>\n            <Route path=\"/\">\n                <Auth />\n            </Route>\n            <Route component={NotFound} />\n        </Switch>\n    );\n};\n\nconst Routes: FC<Props> = () => {\n    const [loading, setLoading] = useState<boolean>(true);\n\n    useEffect(() => {\n        async function loadToken() {\n            try {\n                setLoading(true);\n\n                const accessToken = getToken('accessToken');\n\n                if (!accessToken) {\n                    removeToken();\n                    setLoading(false);\n                    return;\n                }\n\n                const isValidAccessToken = checkToken(accessToken);\n\n                if (!isValidAccessToken) {\n                    const refreshToken = getToken('refreshToken');\n\n                    if (!refreshToken) {\n                        removeToken();\n                        setLoading(false);\n                        return;\n                    }\n\n                    const isValidRefreshToken = checkToken(refreshToken);\n\n                    if (!isValidRefreshToken) {\n                        removeToken();\n                        setLoading(false);\n                        return;\n                    }\n\n                    const responseAccessToken = await refreshAccessToken(\n                        refreshToken,\n                    );\n                    const token = getTokenLocal();\n                    const newToken = {\n                        ...(token as IToken),\n                        accessToken: responseAccessToken.accessToken,\n                    };\n\n                    setToken({\n                        token: newToken,\n                        remember: true,\n                    });\n                    setLoading(false);\n                    return;\n                }\n\n                setLoading(false);\n                return;\n            } catch (error) {\n            } finally {\n                setLoading(false);\n            }\n        }\n        loadToken();\n    }, []);\n\n    if (loading) {\n        return <Loading full />;\n    }\n\n    return (\n        <Suspense fallback={<Loading full />}>\n            <Router>\n                <AppRouter />\n            </Router>\n        </Suspense>\n    );\n};\n\nexport {Routes};\n"]},"metadata":{},"sourceType":"module"}