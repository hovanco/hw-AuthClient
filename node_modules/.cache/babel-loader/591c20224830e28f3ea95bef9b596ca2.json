{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { get } from 'lodash';\n\nconst setToken = ({\n  token,\n  remember = true\n}) => {\n  if (!token) {\n    return;\n  }\n\n  const tokenString = JSON.stringify(token);\n\n  if (remember) {\n    return localStorage.setItem('token', tokenString);\n  }\n\n  return sessionStorage.setItem('token', tokenString);\n};\n\nconst removeToken = () => {\n  localStorage.removeItem('token');\n  sessionStorage.removeItem('token');\n};\n\nconst getTokenLocal = () => {\n  const tokenString = localStorage.getItem('token') || sessionStorage.getItem('token');\n\n  if (!tokenString) {\n    return null;\n  }\n\n  const token = JSON.parse(tokenString);\n  return token;\n};\n\nconst getToken = type => {\n  const tokenLocal = getTokenLocal();\n\n  if (!tokenLocal) {\n    return null;\n  }\n\n  return get(tokenLocal, type || 'accessToken');\n};\n\nconst checkToken = token => {\n  const tokenDecode = jwtDecode(token);\n  const expToken = get(tokenDecode, 'exp');\n\n  if (!expToken) {\n    return false;\n  }\n\n  const dateNow = Math.floor(Date.now() / 1000);\n  return expToken - dateNow > 0;\n};\n\nexport { setToken, getTokenLocal, getToken, removeToken, checkToken };","map":{"version":3,"sources":["/Users/mac3/Desktop/workspace/AuthClient/src/api/token.ts"],"names":["jwtDecode","get","setToken","token","remember","tokenString","JSON","stringify","localStorage","setItem","sessionStorage","removeToken","removeItem","getTokenLocal","getItem","parse","getToken","type","tokenLocal","checkToken","tokenDecode","expToken","dateNow","Math","floor","Date","now"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAAQC,GAAR,QAAkB,QAAlB;;AASA,MAAMC,QAAQ,GAAG,CAAC;AACdC,EAAAA,KADc;AAEdC,EAAAA,QAAQ,GAAG;AAFG,CAAD,KAML;AACR,MAAI,CAACD,KAAL,EAAY;AACR;AACH;;AAED,QAAME,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAApB;;AAEA,MAAIC,QAAJ,EAAc;AACV,WAAOI,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,WAA9B,CAAP;AACH;;AAED,SAAOK,cAAc,CAACD,OAAf,CAAuB,OAAvB,EAAgCJ,WAAhC,CAAP;AACH,CAlBD;;AAoBA,MAAMM,WAAW,GAAG,MAAY;AAC5BH,EAAAA,YAAY,CAACI,UAAb,CAAwB,OAAxB;AACAF,EAAAA,cAAc,CAACE,UAAf,CAA0B,OAA1B;AACH,CAHD;;AAKA,MAAMC,aAAa,GAAG,MAAqB;AACvC,QAAMR,WAAW,GACbG,YAAY,CAACM,OAAb,CAAqB,OAArB,KAAiCJ,cAAc,CAACI,OAAf,CAAuB,OAAvB,CADrC;;AAGA,MAAI,CAACT,WAAL,EAAkB;AACd,WAAO,IAAP;AACH;;AAED,QAAMF,KAAa,GAAGG,IAAI,CAACS,KAAL,CAAWV,WAAX,CAAtB;AAEA,SAAOF,KAAP;AACH,CAXD;;AAaA,MAAMa,QAAQ,GAAIC,IAAD,IAA0D;AACvE,QAAMC,UAAU,GAAGL,aAAa,EAAhC;;AAEA,MAAI,CAACK,UAAL,EAAiB;AACb,WAAO,IAAP;AACH;;AAED,SAAOjB,GAAG,CAACiB,UAAD,EAAaD,IAAI,IAAI,aAArB,CAAV;AACH,CARD;;AAUA,MAAME,UAAU,GAAIhB,KAAD,IAA4B;AAC3C,QAAMiB,WAAW,GAAGpB,SAAS,CAACG,KAAD,CAA7B;AACA,QAAMkB,QAAQ,GAAGpB,GAAG,CAACmB,WAAD,EAAc,KAAd,CAApB;;AAEA,MAAI,CAACC,QAAL,EAAe;AACX,WAAO,KAAP;AACH;;AAED,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAhB;AAEA,SAAOL,QAAQ,GAAGC,OAAX,GAAqB,CAA5B;AACH,CAXD;;AAaA,SAAQpB,QAAR,EAAkBW,aAAlB,EAAiCG,QAAjC,EAA2CL,WAA3C,EAAwDQ,UAAxD","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport {get} from 'lodash';\n\nexport interface IToken {\n    accessToken: string;\n    refreshToken: string;\n    expiredIn: number;\n    type: string;\n}\n\nconst setToken = ({\n    token,\n    remember = true,\n}: {\n    token?: IToken;\n    remember?: boolean;\n}): void => {\n    if (!token) {\n        return;\n    }\n\n    const tokenString = JSON.stringify(token);\n\n    if (remember) {\n        return localStorage.setItem('token', tokenString);\n    }\n\n    return sessionStorage.setItem('token', tokenString);\n};\n\nconst removeToken = (): void => {\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('token');\n};\n\nconst getTokenLocal = (): IToken | null => {\n    const tokenString =\n        localStorage.getItem('token') || sessionStorage.getItem('token');\n\n    if (!tokenString) {\n        return null;\n    }\n\n    const token: IToken = JSON.parse(tokenString);\n\n    return token;\n};\n\nconst getToken = (type?: 'accessToken' | 'refreshToken'): string | null => {\n    const tokenLocal = getTokenLocal();\n\n    if (!tokenLocal) {\n        return null;\n    }\n\n    return get(tokenLocal, type || 'accessToken');\n};\n\nconst checkToken = (token: string): boolean => {\n    const tokenDecode = jwtDecode(token);\n    const expToken = get(tokenDecode, 'exp');\n\n    if (!expToken) {\n        return false;\n    }\n\n    const dateNow = Math.floor(Date.now() / 1000);\n\n    return expToken - dateNow > 0;\n};\n\nexport {setToken, getTokenLocal, getToken, removeToken, checkToken};\n"]},"metadata":{},"sourceType":"module"}